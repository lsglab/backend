class WebBase{constructor(){this.createUUID()}createUUID(){this.id="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,t=>{const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})}}class InputBase extends WebBase{constructor(t=""){super(),this.placeholder=t,this.data=this.placeholder,this.type="base"}save(t){return this.deleteInput(t),{data:this.data,id:this.id,placeholder:this.placeholder,type:this.type}}createFromData(t){Object.keys(t).forEach(e=>{this[e]=t[e]})}}class ShortText extends InputBase{constructor(t){super(t),this.type="shortText"}prepareInput(t,e){const s=t.getElementById(this.id);s.contentEditable=!0,s.contenteditable=!0,s.classList.add("input-outline"),s.addEventListener("input",()=>{this.data=s.innerText,e()},!1)}save(t){const e=t.getElementById(this.id);return this.data=e.innerText,super.save(t)}deleteInput(t){const e=t.getElementById(this.id);e.contentEditable=!1,e.contenteditable=!1,e.classList.remove("input-outline")}}export{InputBase as I,ShortText as S,WebBase as W};
