import{t as s}from"./time.4604e9c6.js";class Base{assign(s,e){e in s&&(this[e]=s[e])}}class Column extends Base{constructor(s){super(),this.assign(s,"table"),this.assign(s,"name"),this.assign(s,"type"),this.assign(s,"unique"),this.assign(s,"required"),this.assign(s,"identifier"),this.assign(s,"hidden"),this.assign(s,"fillable"),this.assign(s,"isDisplayValue"),this.assign(s,"default"),this.assign(s,"enum"),this.setInputType(),this.setAutocomplete()}setInputType(){switch(this.type){case"boolean":this.inputType="radio";break;default:this.inputType=this.type}}setAutocomplete(){switch(this.type){case"password":this.autocomplete="new-password";break;default:this.autocomplete="off"}}modifyData(s){const e=s;switch(this.type){case"password":return e.password_confirmation=e[this.name],e;default:return e}}setDisplayData(e){const t=e;switch(this.type){case"timestamp":return t[this.name]=s(t[this.name],{day:"numeric",month:"long",year:"numeric"}),t;default:return t}}}class Relation extends Column{constructor(s){super(s),this.assign(s,"foreignTable"),this.assign(s,"relationType"),this.assign(s,"functionName"),this.assign(s,"baseType")}}class Table extends Base{constructor(s){super(),this.assign(s,"name"),this.assign(s,"plural"),this.assign(s,"table"),this.assign(s,"parent"),this.assign(s,"children"),this.assign(s,"permissions"),this.assign(s,"editable"),this.createColumns(s.columns),this.createRelations(s.relations)}createColumns(s){this.columns=[],s.forEach(s=>{this.columns.push(new Column(s))})}createRelations(s){this.relations=[],s.forEach(s=>{this.relations.push(new Relation(s))})}getAll(){return this.columns.concat(this.relations)}arrayIsNull(s){return void 0===s?this.getAll():s}getVisible(s){return this.arrayIsNull(s).filter(s=>!1===s.hidden)}getHidden(s){return this.arrayIsNull(s).filter(s=>!0===s.hidden)}getFillable(s){return this.arrayIsNull(s).filter(s=>!0===s.fillable)}getIdentifiers(s){return this.arrayIsNull(s).filter(s=>!0===s.identifier)}getTableColumns(s){return this.arrayIsNull(s).filter(s=>"relation"!==s.type||"belongs_to"===s.baseType)}getNoDefaults(s){return this.arrayIsNull(s).filter(s=>"timestamp"!==s.type&&"id"!==s.type&&"creator_id"!==s.name)}getEditable(s){return this.arrayIsNull(s).filter(s=>this.editable.includes(s.name))}getColumnNames(s){return this.arrayIsNull(s).map(s=>s.name)}getDisplayValue(s){const e=this.arrayIsNull(s).find(s=>!0===s.isDisplayValue);return void 0===e?"id":e.name}getPermissions(s){function e(s,e){return!1!==s&&(void 0===e||s.includes(e))}let t=s;void 0!==t&&(t=parseInt(t,10));const i=e(this.permissions.read,t)||e(this.permissions["read-self"],t),a=e(this.permissions.edit,t)||e(this.permissions["edit-self"],t),n=e(this.permissions.delete,t)||e(this.permissions["delete-self"],t),{create:r}=this.permissions;return{create:r,delete:n,edit:a,read:i}}getColumnPermission(s,e){const t=this.getPermissions(s);return"new"===s?t.create:this.editable.includes(e)&&t.edit}getReadOnly(s,e){const t=this.getPermissions(s);return void 0===e?!t.edit:!this.getColumnPermission(s,e)}modifyData(s){let e=s;return this.getAll().forEach(s=>{e=s.modifyData(e)}),e}}export{Table as T};
