(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1635511072069;
	const files = ["/service-worker-index.html", "/MaterialIcons-Regular.ttf", "/android-chrome-144x144.png", "/android-chrome-36x36.png", "/android-chrome-48x48.png", "/android-chrome-72x72.png", "/android-chrome-96x96.png", "/apple-touch-icon-120x120-precomposed.png", "/apple-touch-icon-120x120.png", "/apple-touch-icon-60x60-precomposed.png", "/apple-touch-icon-60x60.png", "/apple-touch-icon-76x76-precomposed.png", "/apple-touch-icon-76x76.png", "/apple-touch-icon-precomposed.png", "/apple-touch-icon.png", "/arrow.svg", "/browserconfig.xml", "/design.svg", "/diamond-pattern.png", "/emoji_events.svg", "/favicon-16x16.png", "/favicon-32x32.png", "/favicon.ico", "/mstile-144x144.png", "/mstile-150x150.png", "/mstile-310x150.png", "/mstile-310x310.png", "/mstile-70x70.png", "/open-sans-v17-latin-300.eot", "/open-sans-v17-latin-300.svg", "/open-sans-v17-latin-300.ttf", "/open-sans-v17-latin-300.woff", "/open-sans-v17-latin-300.woff2", "/open-sans-v17-latin-300italic.eot", "/open-sans-v17-latin-300italic.svg", "/open-sans-v17-latin-300italic.ttf", "/open-sans-v17-latin-300italic.woff", "/open-sans-v17-latin-300italic.woff2", "/open-sans-v17-latin-600.eot", "/open-sans-v17-latin-600.svg", "/open-sans-v17-latin-600.ttf", "/open-sans-v17-latin-600.woff", "/open-sans-v17-latin-600.woff2", "/open-sans-v17-latin-600italic.eot", "/open-sans-v17-latin-600italic.svg", "/open-sans-v17-latin-600italic.ttf", "/open-sans-v17-latin-600italic.woff", "/open-sans-v17-latin-600italic.woff2", "/open-sans-v17-latin-italic.eot", "/open-sans-v17-latin-italic.svg", "/open-sans-v17-latin-italic.ttf", "/open-sans-v17-latin-italic.woff", "/open-sans-v17-latin-italic.woff2", "/open-sans-v17-latin-regular.eot", "/open-sans-v17-latin-regular.svg", "/open-sans-v17-latin-regular.ttf", "/open-sans-v17-latin-regular.woff", "/open-sans-v17-latin-regular.woff2", "/paid.svg", "/pdf.svg", "/rect-pattern.png", "/safari-pinned-tab.svg", "/site.webmanifest", "/sort.svg"];

	const shell = ["/client/inject_styles.fe622066.js", "/client/client.35db3e08.js", "/client/index.a9ac9dec.js", "/client/login.f94768fe.js", "/client/index.9147474e.js", "/client/TopNav.8aec55bd.js", "/client/index.b9e7dd21.js", "/client/TableEntries.1e2670cb.js", "/client/table.43c943e1.js", "/client/[slug].95d84927.js", "/client/SiteBuilder.cfe7749e.js", "/client/GoBack.48e70f5c.js", "/client/EditComponent.8f2e5046.js", "/client/index.e08755c3.js", "/client/[slug].eb213afa.js", "/client/object.4d804305.js", "/client/index.f54e4746.js", "/client/[slug].0ff3b31a.js", "/client/index.92ec7e7d.js", "/client/lol.502fdcfd.js", "/client/new.55979040.js", "/client/ckeditor.b0301b4e.js"];

	/* eslint-disable */
	const ASSETS = `cache${timestamp}`; // `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory

	const toCache = shell.concat(files);
	const cached = new Set(toCache);
	self.addEventListener('install', event => {
	  event.waitUntil(caches.open(ASSETS).then(cache => cache.addAll(toCache)).then(() => {
	    self.skipWaiting();
	  }));
	});
	self.addEventListener('activate', event => {
	  event.waitUntil(caches.keys().then(async keys => {
	    // delete old caches
	    keys.forEach(async key => {
	      if (key !== ASSETS) await caches.delete(key);
	    });
	    self.clients.claim();
	  }));
	});
	self.addEventListener('fetch', event => {
	  if (event.request.method !== 'GET' || event.request.headers.has('range')) return;
	  const url = new URL(event.request.url); // don't try to handle e.g. data: URIs

	  if (!url.protocol.startsWith('http')) return; // ignore dev server requests

	  if (url.hostname === self.location.hostname && url.port !== self.location.port) return; // always serve static files and bundler-generated assets from cache

	  if (url.host === self.location.host && cached.has(url.pathname)) {
	    event.respondWith(caches.match(event.request));
	    return;
	  } // for pages, you might want to serve a shell `service-worker-index.html` file,
	  // which Sapper has generated for you. It's not right for every
	  // app, but if it's right for yours then uncomment this section

	  /*
	  if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
	  	event.respondWith(caches.match('/service-worker-index.html'));
	  	return;
	  }
	  */


	  if (event.request.cache === 'only-if-cached') return; // for everything else, try the network first, falling back to
	  // cache if the user is offline. (If the pages never change, you
	  // might prefer a cache-first approach to a network-first one.)

	  event.respondWith(caches.open(`offline${timestamp}`).then(async cache => {
	    try {
	      const response = await fetch(event.request);
	      cache.put(event.request, response.clone());
	      return response;
	    } catch (err) {
	      const response = await cache.match(event.request);
	      if (response) return response;
	      throw err;
	    }
	  }));
	});

}());
